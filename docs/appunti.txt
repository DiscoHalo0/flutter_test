//codice build 1.0 senza pop up generale grande per info e approfondimento:
import 'package:flutter/material.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'info_page.dart';
import 'approfondimenti_page.dart';

class ListViewTest extends StatelessWidget {
  const ListViewTest({super.key});

  void _navigateToInfo(BuildContext context, String item) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => InfoPage(item: item, description: ''),
      ),
    );
  }

  void _navigateToApprofondimento(BuildContext context, String item) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => ApprofondimentiPage(item: item, description: ''),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final items = List<String>.generate(8, (index) => 'Item ${index + 1}');

    return Scaffold(
      appBar: AppBar(title: const Text('Learning ListView')),
      body: Stack(
        children: [
          // Sfondo a tutto schermo
          SizedBox.expand(
            child: Image.asset(
              'assets/prova1.jpeg',
              fit: BoxFit.cover,
            ),
          ),

          // Lista sopra lo sfondo
          ListView.builder(
            itemCount: items.length,
            itemBuilder: (context, index) {
              final item = items[index];

              return Slidable(
                key: ValueKey(item),
                endActionPane: ActionPane(
                  motion: const DrawerMotion(),
                  children: [
                    SlidableAction(
                      onPressed: (_) => _navigateToInfo(context, item),
                      backgroundColor: const Color.fromARGB(255, 124, 169, 248),
                      icon: Icons.info_outline,
                      label: 'Info',
                    ),
                    SlidableAction(
                      onPressed: (_) => _navigateToApprofondimento(context, item),
                      backgroundColor: const Color.fromARGB(255, 99, 197, 243),
                      icon: Icons.menu_book_outlined,
                      label: 'Approfondisci',
                    ),
                  ],
                ),
                child: _SlidableItem(item: item, onInfo: () => _navigateToInfo(context, item), onApprofondisci: () => _navigateToApprofondimento(context, item)),
              );
            },
          ),
        ],
      ),
    );
  }
}

class _SlidableItem extends StatefulWidget {
  final String item;
  final VoidCallback onInfo;
  final VoidCallback onApprofondisci;

  const _SlidableItem({
    required this.item,
    required this.onInfo,
    required this.onApprofondisci,
  });

  @override
  State<_SlidableItem> createState() => _SlidableItemState();
}

class _SlidableItemState extends State<_SlidableItem> {
  bool isOpen = false;


  @override
  Widget build(BuildContext context) {
    return Slidable(
      key: ValueKey(widget.item),
      startActionPane: ActionPane(
        motion: const DrawerMotion(),
        extentRatio: 0.5,
        dragDismissible: false,
        children: [],
      ),
      endActionPane: ActionPane(
        motion: const DrawerMotion(),
        extentRatio: 0.5,
        children: [],
      ),
      child: GestureDetector(
        onHorizontalDragStart: (_) {
          setState(() {
            isOpen = false; // Azzera lo stato per mostrare l'item iniziale
          });
        },
        onHorizontalDragUpdate: (details) {
          if (details.primaryDelta! < 0) {
            // Scorrimento verso sinistra, mostra i rettangoli
            setState(() {
              isOpen = true;
            });
          } else if (details.primaryDelta! > 0) {
            // Scorrimento verso destra, torna all'item originale
            setState(() {
              isOpen = false;
            });
          }
        },
        child: Container(
          margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
          padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
          decoration: BoxDecoration(
            // ignore: deprecated_member_use
            color: Colors.blue.shade100.withOpacity(0.5),
            borderRadius: BorderRadius.circular(8),
            boxShadow: [
              BoxShadow(
                // ignore: deprecated_member_use
                color: Colors.black.withOpacity(0.2),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          height: 120,
          child: Center(
            child: AnimatedSwitcher(
              duration: const Duration(milliseconds: 375),
              child: isOpen
                  ? Row(
                      key: const ValueKey('buttons'),
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        Container(
                          width: 150,
                          height: 100,
                          decoration: BoxDecoration(
                            color: Colors.lightBlue,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: ElevatedButton.icon(
                            onPressed: widget.onInfo,
                            icon: const Icon(Icons.info_outline),
                            label: const Text('Info'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.transparent,
                              elevation: 0,
                            ),
                          ),
                        ),
                        Container(
                          width: 175,
                          height: 100,
                          decoration: BoxDecoration(
                            color: Colors.lightBlue,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: ElevatedButton.icon(
                            onPressed: widget.onApprofondisci,
                            icon: const Icon(Icons.menu_book_outlined),
                            label: const Text('Approfondisci'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.transparent,
                              elevation: 0,
                            ),
                          ),
                        ),
                      ],
                    )
                  : Text(
                      widget.item,
                      key: const ValueKey('text'),
                      style: const TextStyle(
                        fontSize: 22,
                        fontWeight: FontWeight.w500,
                        color: Colors.white,
                      ),
                    ),
            ),
          ),
        ),
      ),
    );
  }
}



//
//	seconda versione + aggiornata
//


import 'package:flutter/material.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'info_page.dart';
import 'approfondimenti_page.dart';

class ListViewTest extends StatelessWidget {
  const ListViewTest({super.key});

  void _navigateToInfo(BuildContext context, String item) {
    // Mostra il popup con la descrizione di Info
    _showInfoDialog(context, item);
  }

  void _navigateToApprofondimento(BuildContext context, String item) {
    // Mostra il popup con la descrizione di Approfondimento
    _showApprofondimentoDialog(context, item);
  }

  // Funzione per visualizzare un popup con la descrizione di Info
  void _showInfoDialog(BuildContext context, String item) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Info: $item'),
          content: Text('Questa è la descrizione di $item."Lorem ipsum dolor sit amet, consectetur adipiscing elit,'
           'sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation '
           'ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse '
           'cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('Chiudi'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).push(
                  MaterialPageRoute(
                    builder: (_) => InfoPage(item: item, description: ''),
                  ),
                );
              },
              child: const Text('Vai alla pagina relativa'),
            ),
          ],
        );
      },
    );
  }

  // Funzione per visualizzare un popup con la descrizione di Approfondimento
  void _showApprofondimentoDialog(BuildContext context, String item) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Approfondimento: $item'),
          content: Text('Qui puoi approfondire i dettagli su $item. Questa è la descrizione "Lorem ipsum dolor sit amet, consectetur adipiscing elit,'
           'sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation '
           'ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse '
           'cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.".'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('Chiudi'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).push(
                  MaterialPageRoute(
                    builder: (_) => ApprofondimentiPage(item: item, description: ''),
                  ),
                );
              },
              child: const Text('Vai alla pagina relativa'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final items = List<String>.generate(8, (index) => 'Item ${index + 1}');

    return Scaffold(
      appBar: AppBar(title: const Text('Learning ListView')),
      body: Stack(
        children: [
          // Sfondo a tutto schermo
          SizedBox.expand(
            child: Image.asset(
              'assets/prova1.jpeg',
              fit: BoxFit.cover,
            ),
          ),

          // Lista sopra lo sfondo
          ListView.builder(
            itemCount: items.length,
            itemBuilder: (context, index) {
              final item = items[index];

              return Slidable(
                key: ValueKey(item),
                endActionPane: ActionPane(
                  motion: const DrawerMotion(),
                  children: [
                    SlidableAction(
                      onPressed: (_) => _navigateToInfo(context, item),
                      backgroundColor: const Color.fromARGB(255, 124, 169, 248),
                      icon: Icons.info_outline,
                      label: 'Info',
                    ),
                    SlidableAction(
                      onPressed: (_) => _navigateToApprofondimento(context, item),
                      backgroundColor: const Color.fromARGB(255, 99, 197, 243),
                      icon: Icons.menu_book_outlined,
                      label: 'Approfondisci',
                    ),
                  ],
                ),
                child: _SlidableItem(item: item, onInfo: () => _navigateToInfo(context, item), onApprofondisci: () => _navigateToApprofondimento(context, item)),
              );
            },
          ),
        ],
      ),
    );
  }
}

class _SlidableItem extends StatefulWidget {
  final String item;
  final VoidCallback onInfo;
  final VoidCallback onApprofondisci;

  const _SlidableItem({
    required this.item,
    required this.onInfo,
    required this.onApprofondisci,
  });

  @override
  State<_SlidableItem> createState() => _SlidableItemState();
}

class _SlidableItemState extends State<_SlidableItem> {
  bool isOpen = false;

  @override
  Widget build(BuildContext context) {
    return Slidable(
      key: ValueKey(widget.item),
      startActionPane: ActionPane(
        motion: const DrawerMotion(),
        extentRatio: 0.5,
        dragDismissible: false,
        children: [],
      ),
      endActionPane: ActionPane(
        motion: const DrawerMotion(),
        extentRatio: 0.5,
        children: [],
      ),
      child: GestureDetector(
        onHorizontalDragStart: (_) {
          setState(() {
            isOpen = false; // Azzera lo stato per mostrare l'item iniziale
          });
        },
        onHorizontalDragUpdate: (details) {
          if (details.primaryDelta! < 0) {
            // Scorrimento verso sinistra, mostra i rettangoli
            setState(() {
              isOpen = true;
            });
          } else if (details.primaryDelta! > 0) {
            // Scorrimento verso destra, torna all'item originale
            setState(() {
              isOpen = false;
            });
          }
        },
        child: Container(
          margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
          padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 24),
          decoration: BoxDecoration(
            color: Colors.blue.shade100.withOpacity(0.5),
            borderRadius: BorderRadius.circular(8),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.2),
                blurRadius: 8,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          height: 120,
          child: Center(
            child: AnimatedSwitcher(
              duration: const Duration(milliseconds: 375),
              child: isOpen
                  ? Row(
                      key: const ValueKey('buttons'),
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        Container(
                          width: 150,
                          height: 100,
                          decoration: BoxDecoration(
                            color: Colors.lightBlue,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: ElevatedButton.icon(
                            onPressed: widget.onInfo,
                            icon: const Icon(Icons.info_outline),
                            label: const Text('Info'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.transparent,
                              elevation: 0,
                            ),
                          ),
                        ),
                        Container(
                          width: 175,
                          height: 100,
                          decoration: BoxDecoration(
                            color: const Color.fromARGB(255, 101, 196, 240),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: ElevatedButton.icon(
                            onPressed: widget.onApprofondisci,
                            icon: const Icon(Icons.menu_book_outlined),
                            label: const Text('Approfondisci'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.transparent,
                              elevation: 0,
                            ),
                          ),
                        ),
                      ],
                    )
                  : Text(
                      widget.item,
                      key: const ValueKey('text'),
                      style: const TextStyle(
                        fontSize: 22,
                        fontWeight: FontWeight.w500,
                        color: Colors.white,
                      ),
                    ),
            ),
          ),
        ),
      ),
    );
  }
}


